import PIL
import streamlit as st
import openai
from PIL import Image, UnidentifiedImageError
import io
import os
import requests
from huggingface_hub import InferenceClient

# Set API keys directly
openai.api_key = "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"
hf_api_key = "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"

# Streamlit app

def generate_image(prompt, size="1024x1024"):
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size=size
        )
        image_url = response['data'][0]['url']
        return image_url
    except openai.error.InvalidRequestError as e:
        return f"Invalid request: {str(e)}"
    except openai.error.RateLimitError:
        return "Rate limit exceeded. Please try again later."
    except requests.exceptions.Timeout:
        return "Request timed out. Please try again."
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

def generate_image_flux(prompt, size="1024x1024"):
    try:
        client = InferenceClient(token=hf_api_key)
        if not hf_api_key:
            return "HuggingFace API key is not configured"
            
        width, height = map(int, size.split('x'))
        
        image_bytes = client.post(
            model="black-forest-labs/FLUX.1-schnell",
            data={
                "inputs": prompt,
                "parameters": {
                    "negative_prompt": "",
                    "width": width,
                    "height": height,
                }
            }
        )
        
        buffered = io.BytesIO(image_bytes)
        return buffered
    except ValueError as e:
        return f"Invalid size format: {str(e)}"
    except requests.exceptions.RequestException as e:
        return f"Network error: {str(e)}"
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

def edit_image(image_file, prompt, size="1024x1024"):
    try:
        if not image_file:
            return "No image file provided"
            
        image = Image.open(image_file)
        image = image.convert("RGBA")
        
        # Validate image size
        if image.size[0] * image.size[1] > 4194304:  # 2048x2048 limit
            return "Image is too large. Please use a smaller image."
            
        buffered = io.BytesIO()
        image.save(buffered, format="PNG")
        buffered.seek(0)
        
        response = openai.Image.create_edit(
            image=buffered,
            prompt=prompt,
            n=1,
            size=size
        )
        edited_image_url = response['data'][0]['url']
        return edited_image_url
    except UnidentifiedImageError:
        return "Uploaded file is not a valid image."
    except PIL.Image.DecompressionBombError:
        return "Image is too large to process."
    except openai.error.InvalidRequestError as e:
        return f"Invalid request: {str(e)}"
    except Exception as e:
        return f"An unexpected error occurred: {str(e)}"

# Streamlit app
st.title("AI Image Generator and Editor")

tab1, tab2 = st.tabs(["Generate Image", "Edit Image"])

# Tab 1: Generate Image
with tab1:
    st.header("Generate Image")
    st.write("Enter a description below, and AI will generate an image for you!")

    try:
        model_name = st.selectbox("Select AI Model:", ["DALL-E", "FLUX.1-Schnell"])
        
        # Validate prompt length
        max_prompt_length = 1000
        user_prompt = st.text_area("Enter your image description:", "")
        if len(user_prompt) > max_prompt_length:
            st.warning(f"Prompt is too long. Maximum length is {max_prompt_length} characters.")
            user_prompt = user_prompt[:max_prompt_length]
            
        image_size = st.selectbox("Select image size:", ["256x256", "512x512", "1024x1024"])

        if st.button("Generate Image", key="generate"):
            if not user_prompt.strip():
                st.warning("Please enter a valid description.")
            else:
                with st.spinner("Generating image..."):
                    result = generate_image(user_prompt, image_size) if model_name == "DALL-E" else generate_image_flux(user_prompt, image_size)
                    
                    if isinstance(result, (str, bytes, io.BytesIO)):
                        if isinstance(result, str) and result.startswith("http"):
                            st.image(result, caption=f"Generated by {model_name}", use_container_width=True)
                        elif isinstance(result, (bytes, io.BytesIO)):
                            st.image(result, caption=f"Generated by {model_name}", use_container_width=True)
                        else:
                            st.error(result)
                    else:
                        st.error("Unexpected response format from the API")
    except Exception as e:
        st.error(f"An unexpected error occurred: {str(e)}")

# Tab 2: Edit Image
with tab2:
    st.header("Edit Image")
    st.write("Upload an image and describe the edits you'd like DALL-E to make.")

    # User input for editing
    uploaded_image = st.file_uploader("Upload an image:", type=["jpeg", "jpg", "png"])
    edit_prompt = st.text_area("Describe the edits you want to make:", "")
    edit_size = st.selectbox("Select output image size:", ["256x256", "512x512", "1024x1024"])

    # Edit image button
    if st.button("Edit Image", key="edit"):
        if uploaded_image is None:
            st.warning("Please upload an image.")
        elif edit_prompt.strip() == "":
            st.warning("Please describe the edits you want to make.")
        else:
            with st.spinner("Editing image..."):
                edited_image_url = edit_image(uploaded_image, edit_prompt, edit_size)
            if edited_image_url.startswith("http"):
                st.image(edited_image_url, caption="Edited by DALL-E", use_container_width=True)
            else:
                st.error(f"Error: {edited_image_url}")

st.markdown("---")
st.write("Powered by OpenAI's DALL-E and Black Forest Labs' FLUX.1-Schnell.")
